{"name": "test_income_empty[query1]", "status": "failed", "statusDetails": {"message": "AssertionError: assert [('00110', 'П... 3, ...), ...] == []\n  Left contains 1088 more items, first extra item: ('00110', 'Потери поездо-часов, вызванных отказами 3 категории', 'поездо-час', 502, 63, 3, ...)\n  Full diff:\n    [\n  +  ,\n  -  ('00110',\n  -   'Потери поездо-часов, вызванных отказами 3 категории',\n  -   'поездо-час',...\n  \n  ...Full output truncated (19583 lines hidden), use '-vv' to show", "trace": "query = (\"select \\t'00110' as hcode_id, 'Потери поездо-часов, вызванных отказами 3 категории' as hcode_name, 'поездо-час' as h... kato_id, vids_id from dm_rep.dm_all_indicators_v\\nwhere hcode_id = '00110'\\nand calc_rule = 'ratio'\\n--and dt in ()\",)\nconnection = <cursor object at 0x03AA31A8; closed: 0>\n\n    @allure.feature('Расчетные показатели')\n    @allure.story('Полная сверка')\n    @allure.severity('critical')\n    @pytest.mark.parametrize('query', QUERIES_EMPTY)\n    def test_income_empty(query, connection):\n        if len(query) == 2:\n            connection.execute(query[0])\n            connection.execute(query[1])\n            lines = connection.fetchall()\n            connection.execute('drop function public.lilo_auto_qa();')\n    \n            assert lines == []\n    \n        elif len(query) == 1:\n            connection.execute(query[0])\n            lines = connection.fetchall()\n            #connection.execute('drop function public.lilo_auto_qa();')\n    \n>           assert lines == []\nE           AssertionError: assert [('00110', 'П... 3, ...), ...] == []\nE             Left contains 1088 more items, first extra item: ('00110', 'Потери поездо-часов, вызванных отказами 3 категории', 'поездо-час', 502, 63, 3, ...)\nE             Full diff:\nE               [\nE             +  ,\nE             -  ('00110',\nE             -   'Потери поездо-часов, вызванных отказами 3 категории',\nE             -   'поездо-час',...\nE             \nE             ...Full output truncated (19583 lines hidden), use '-vv' to show\n\ntest_income.py:354: AssertionError"}, "parameters": [{"name": "query", "value": "(\"select \\t'00110' as hcode_id, 'Потери поездо-часов, вызванных отказами 3 категории' as hcode_name, 'поездо-час' as hcode_unit_id, a.org_id, a.dor_kod, \\n\\t\\ta.date_type_id, a.metric_type_id, a.cargo_type_id, a.val_type_id, '48' as unit_id, a.dt, (coalesce(a.value,0)+coalesce(b.value,0)+coalesce(c.value,0)) as value, \\n\\t\\ta.ss, a.duch_id, a.nod_id, a.dir_id, a.kato_id, a.vids_id\\n\\t\\t\\t\\tfrom (select * from dm_rep.dm_all_indicators_v where hcode_id in ('00168') and metric_type_id in (12,17,1,2,10)) a\\n\\t\\t\\t\\tleft join (select * from dm_rep.dm_all_indicators_v where hcode_id in ('00169') and metric_type_id in (12,17,1,2,10)) b\\n\\t\\t\\t\\t\\ton (a.metric_type_id = b.metric_type_id\\n\\t\\t\\t\\t\\t\\tand a.org_id = b.org_id\\n\\t\\t\\t\\t\\t\\tand a.dor_kod = b.dor_kod\\n\\t\\t\\t\\t\\t\\tand a.date_type_id = b.date_type_id\\t\\n\\t\\t\\t\\t\\t\\tand a.cargo_type_id = b.cargo_type_id\\n\\t\\t\\t\\t\\t\\tand a.val_type_id = b.val_type_id\\n\\t\\t\\t\\t\\t\\tand a.dt = b.dt\\n\\t\\t\\t\\t\\t\\tand a.nod_id = b.nod_id\\n\\t\\t\\t\\t\\t\\tand a.duch_id = b.duch_id)\\t\\n\\t\\t\\t\\tleft join (select * from dm_rep.dm_all_indicators_v where hcode_id in ('00170') and metric_type_id in (12,17,1,2,10)) c\\n\\t\\t\\t\\t\\ton (a.metric_type_id = c.metric_type_id\\n\\t\\t\\t\\t\\t\\tand a.org_id = c.org_id\\n\\t\\t\\t\\t\\t\\tand a.dor_kod = c.dor_kod\\n\\t\\t\\t\\t\\t\\tand a.date_type_id = c.date_type_id\\t\\n\\t\\t\\t\\t\\t\\tand a.cargo_type_id = c.cargo_type_id\\n\\t\\t\\t\\t\\t\\tand a.val_type_id = c.val_type_id\\n\\t\\t\\t\\t\\t\\tand a.dt = c.dt\\n\\t\\t\\t\\t\\t\\tand a.nod_id = c.nod_id\\n\\t\\t\\t\\t\\t\\tand a.duch_id = c.duch_id)\\nleft join (select  * from dm_stg.calc_src_indicators_t ind\\n\\t\\t\\t\\tjoin (select hcode_id as hid, src, priority from dm_lgc.m_hcode_priority_t) hcp on ind.hcode_id = hcp.hid\\n\\t\\t\\t\\tjoin (select hcode_id as hid, src, priority from dm_lgc.m_hcode_priority_t where src = 'CALC') hcpr on hcp.hid = hcpr.hid\\n\\t\\t\\t\\twhere hcode_id = '00110' \\n\\t\\t\\t\\tand hcp.priority < hcpr.priority -- Отбор записей с большим приоритетом\\n\\t\\t\\t) d\\n    on  a.org_id = d.org_id \\n\\tand a.duch_id = d.duch_id\\n\\tand a.nod_id = d.nod_id \\n\\tand a.date_type_id = d.date_type_id\\n\\tand a.metric_type_id = d.metric_type_id\\n\\tand a.cargo_type_id = d.cargo_type_id\\n\\tand a.val_type_id = d.val_type_id \\n\\tand a.dt = d.dt\\n\\tand a.dir_id = d.dir_id\\nwhere d.org_id is null \\n    --and a.dt in ()\\nexcept\\nselect  hcode_id, hcode_name, hcode_unit_name, org_id, dor_kod, date_type_id, metric_type_id, cargo_type_id, val_type_id, unit_id, dt, value, ss, duch_id, nod_id,\\n\\t\\tdir_id, kato_id, vids_id from dm_rep.dm_all_indicators_v\\nwhere hcode_id = '00110'\\nand calc_rule = 'ratio'\\n--and dt in ()\",)"}], "start": 1604831134488, "stop": 1604831157005, "uuid": "1165d911-2298-45a3-bb5c-9549d59e656b", "historyId": "6b05e37b1defebe3205ba911f2ae0143", "testCaseId": "5ad748bc6397600d7a3451f4d7068b8d", "fullName": "test_income#test_income_empty", "labels": [{"name": "feature", "value": "Расчетные показатели"}, {"name": "story", "value": "Полная сверка"}, {"name": "severity", "value": "critical"}, {"name": "suite", "value": "test_income"}, {"name": "host", "value": "62032-nb"}, {"name": "thread", "value": "13564-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_income"}]}