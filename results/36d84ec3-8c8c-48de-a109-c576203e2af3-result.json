{"name": "test_income_empty[query0]", "status": "passed", "parameters": [{"name": "query", "value": "(\"create or replace function public.lilo_auto_qa() \\n\\treturns table(\\thcode_id bpchar, hcode_name varchar(300), hcode_unit_name varchar(30), org_id int8, dor_kod int8, \\n\\t\\t\\t\\t\\tdate_type_id int8, metric_type_id int8, cargo_type_id int8, val_type_id int8, unit_id int8, dt date, \\n\\t\\t\\t\\t\\tvalue float8, duch_id int8, nod_id int8, dir_id int8, kato_id int8, vids_id int8)\\nlanguage plpgsql\\nas $f$\\nbegin\\n\\tdrop table if exists public.la_qa1;\\n\\tdrop table if exists public.la_qa2;\\n\\tcreate table public.la_qa1 as\\n\\t\\tselect * from dm_rep.dm_all_indicators_v a where a.hcode_id in ('00327') and a.unit_id = 45 and a.calc_rule not in ('influence', 'deviation');\\n\\tcreate table public.la_qa2 as \\n\\t\\tselect * from dm_rep.dm_all_indicators_v a where a.hcode_id in ('00131') and a.unit_id in (17,89) and a.calc_rule not in ('influence', 'deviation');\\n\\treturn query\\nselect \\n\\t'00004'::bpchar as hcode_id, \\n\\thcd.name as hcode_name, \\n\\thcd.unit_name as hcode_unit_name, \\n\\tcoalesce (a.org_id, b.org_id)::int8 as org_id,  \\n\\tcoalesce (a.dor_kod, b.dor_kod)::int8 as dor_kod,  \\n\\tcoalesce (a.date_type_id, b.date_type_id)::int8 as date_type_id, \\n\\tcoalesce (a.metric_type_id, b.metric_type_id)::int8 as metric_type_id, \\n\\tcoalesce (a.cargo_type_id, b.cargo_type_id)::int8 as cargo_type_id, \\n\\tcoalesce (a.val_type_id, b.val_type_id)::int8 as val_type_id, \\n  \\t49::int8 as unit_id, \\n \\tcoalesce (a.dt, b.dt)::date as dt, \\n  \\t((a.value/b.value)::numeric(20,6))::float8 as value, \\n\\tcoalesce (a.duch_id, b.duch_id)::int8 as duch_id, \\n\\tcoalesce (a.nod_id, b.nod_id)::int8 as nod_id, \\n\\tcoalesce (a.dir_id, b.dir_id)::int8 as dir_id, \\n\\tcoalesce (a.kato_id, b.kato_id)::int8 as kato_id, \\n\\tcoalesce (a.vids_id, b.vids_id)::int8 as vids_id\\nfrom public.la_qa1 a\\n\\tleft join public.la_qa2 b\\n\\t\\ton  a.org_id = b.org_id\\n\\t\\tand a.date_type_id = b.date_type_id\\n\\t\\tand a.cargo_type_id = b.cargo_type_id\\n\\t\\tand a.val_type_id = b.val_type_id\\n\\t\\tand a.metric_type_id = b.metric_type_id\\n\\t\\tand a.dt = b.dt\\n\\t\\tand a.nod_id = b.nod_id\\n\\t\\tand a.duch_id = b.duch_id\\n\\t\\tand a.vids_id = b.vids_id \\n\\t\\tand a.kato_id = b.kato_id \\n\\t\\tand a.dir_id = b.dir_id\\ncross join (select * from dm.d_hcode_t where id = '00004') hcd\\n    ;\\nend;\\n$f$\\n;\", \"select * from public.lilo_auto_qa()\\nexcept\\nselect  hcode_id, hcode_name, hcode_unit_name, org_id, dor_kod, date_type_id, metric_type_id, cargo_type_id, val_type_id, unit_id, dt, \\n\\t\\tvalue::numeric(20,6), duch_id, nod_id, dir_id, kato_id, vids_id from dm_rep.dm_all_indicators_v\\nwhere hcode_id = '00004'\\nand calc_rule = 'income'\")"}], "start": 1604831104250, "stop": 1604831134465, "uuid": "3a0b913f-da9c-4c5c-bf6d-974531ffaf8c", "historyId": "d4c0d34cfa959947e0989c92487161e7", "testCaseId": "5ad748bc6397600d7a3451f4d7068b8d", "fullName": "test_income#test_income_empty", "labels": [{"name": "feature", "value": "Расчетные показатели"}, {"name": "story", "value": "Полная сверка"}, {"name": "severity", "value": "critical"}, {"name": "suite", "value": "test_income"}, {"name": "host", "value": "62032-nb"}, {"name": "thread", "value": "13564-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_income"}]}