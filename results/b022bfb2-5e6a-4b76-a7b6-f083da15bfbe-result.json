{"name": "test_income_equal[query9]", "status": "passed", "parameters": [{"name": "query", "value": "(\"create or replace function public.lilo_auto_qa() returns table(cnt int8)\\nlanguage plpgsql\\nas $f$\\nbegin\\n\\tdrop table if exists public.la_qa1;\\n\\tdrop table if exists public.la_qa2;\\n\\tdrop table if exists public.la_qa3;\\n\\tdrop table if exists public.la_qa4;\\n\\tcreate table public.la_qa1 as \\n\\t\\tselect * from dm_rep.dm_all_indicators_v where hcode_id in ('00168') and metric_type_id = 1;\\n\\tcreate table public.la_qa2 as\\n\\t\\tselect * from dm_rep.dm_all_indicators_v where hcode_id in ('00169') and metric_type_id = 1;\\n\\tcreate table public.la_qa3 as\\n\\t\\tselect * from dm_rep.dm_all_indicators_v where hcode_id in ('00170') and metric_type_id = 1; \\n\\tcreate table public.la_qa4 as\\n\\t\\tselect * from dm_rep.dm_all_indicators_v where hcode_id in ('00154') and metric_type_id = 17; \\n\\treturn query\\nselect count(0) from (\\nselect  \\ncoalesce (ab.org_id, c.org_id) as org_id,  \\ncoalesce (ab.date_type_id, c.date_type_id) as date_type_id, \\ncoalesce (ab.metric_type_id, c.metric_type_id) as metric_type_id, \\ncoalesce (ab.cargo_type_id, c.cargo_type_id) as cargo_type_id, \\ncoalesce (ab.val_type_id, c.val_type_id) as val_type_id, \\ncoalesce (ab.dt, c.dt) as dt, \\ncoalesce (ab.duch_id, c.duch_id) as duch_id, \\ncoalesce (ab.nod_id, c.nod_id) as nod_id, \\ncoalesce (ab.dir_id, c.dir_id) as dir_id, \\ncoalesce (ab.kato_id, c.kato_id) as kato_id, \\ncoalesce (ab.vids_id, c.vids_id) as vids_id\\nfrom(\\nselect\\ncoalesce (a.org_id, b.org_id) as org_id,  \\ncoalesce (a.date_type_id, b.date_type_id) as date_type_id, \\ncoalesce (a.metric_type_id, b.metric_type_id) as metric_type_id, \\ncoalesce (a.cargo_type_id, b.cargo_type_id) as cargo_type_id, \\ncoalesce (a.val_type_id, b.val_type_id) as val_type_id, \\ncoalesce (a.dt, b.dt) as dt, \\ncoalesce (a.duch_id, b.duch_id) as duch_id, \\ncoalesce (a.nod_id, b.nod_id) as nod_id, \\ncoalesce (a.dir_id, b.dir_id) as dir_id, \\ncoalesce (a.kato_id, b.kato_id) as kato_id, \\ncoalesce (a.vids_id, b.vids_id) as vids_id\\nfrom public.la_qa1 a\\n\\tfull join public.la_qa2 b\\n\\t\\ton \\ta.org_id = b.org_id\\n\\t\\tand a.date_type_id = b.date_type_id\\n\\t\\tand a.cargo_type_id = b.cargo_type_id\\n\\t\\tand a.val_type_id = b.val_type_id\\n\\t\\tand a.dt = b.dt\\n\\t\\tand a.nod_id = b.nod_id\\n\\t\\tand a.duch_id = b.duch_id\\n\\t\\tand a.vids_id = b.vids_id \\n\\t\\tand a.kato_id = b.kato_id \\n\\t\\tand a.dir_id = b.dir_id) ab\\n\\tfull join public.la_qa3 c\\n\\t\\ton \\tab.org_id = c.org_id\\n\\t\\tand ab.date_type_id = c.date_type_id\\n\\t\\tand ab.cargo_type_id = c.cargo_type_id\\n\\t\\tand ab.val_type_id = c.val_type_id\\n\\t\\tand ab.dt = c.dt\\n\\t\\tand ab.nod_id = c.nod_id\\n\\t\\tand ab.duch_id = c.duch_id\\n\\t\\tand ab.vids_id = c.vids_id \\n\\t\\tand ab.kato_id = c.kato_id \\n\\t\\tand ab.dir_id = c.dir_id)abc\\n\\tleft join public.la_qa4 d\\n\\t\\ton \\tabc.org_id = d.org_id\\n\\t\\tand abc.date_type_id = d.date_type_id\\n\\t\\tand abc.cargo_type_id = d.cargo_type_id\\n\\t\\tand abc.val_type_id = d.val_type_id\\n\\t\\tand abc.dt = d.dt\\n\\t\\tand abc.nod_id = d.nod_id\\n\\t\\tand abc.duch_id = d.duch_id\\n\\t\\tand abc.vids_id = d.vids_id \\n\\t\\tand abc.kato_id = d.kato_id \\n\\t\\tand abc.dir_id = d.dir_id\\n    ;\\nend;\\n$f$\\n;\", \"select count(0) from dm_rep.dm_all_indicators_v\\nwhere hcode_id = '00298'\\nand calc_rule = 'ratio'\\n--and dt in ()\\nunion all\\nselect * from public.lilo_auto_qa();\")"}], "start": 1604830749159, "stop": 1604830759400, "uuid": "ceee6f1f-bae6-4d75-8dc7-97980ab542e9", "historyId": "eb3672d84ec6808bd5a2bd572b05988e", "testCaseId": "b1f59914a2914a84f38d1c0adcd0ac2e", "fullName": "test_income#test_income_equal", "labels": [{"name": "feature", "value": "Расчетные показатели"}, {"name": "severity", "value": "critical"}, {"name": "story", "value": "Сравнение всех записей"}, {"name": "suite", "value": "test_income"}, {"name": "host", "value": "62032-nb"}, {"name": "thread", "value": "13564-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_income"}]}